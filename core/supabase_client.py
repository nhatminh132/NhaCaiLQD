# core/supabase_client.py
# Qu·∫£n l√Ω k·∫øt n·ªëi Supabase: t·ª± kh·ªüi t·∫°o, retry khi l·ªói, t∆∞∆°ng th√≠ch m·ªçi version supabase-py
import os
import time
import logging
from supabase import create_client, Client

# === C·∫•u h√¨nh logging m√†u (ƒë·∫πp tr√™n Render) === #
class LogColors:
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    RESET = "\033[0m"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | SUPABASE | %(message)s",
)

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase_client: Client | None = None


# === H√†m t·∫°o client t∆∞∆°ng th√≠ch m·ªçi phi√™n b·∫£n === #
def safe_create_client(url: str, key: str) -> Client:
    """
    T·∫°o client t∆∞∆°ng th√≠ch v·ªõi c·∫£ phi√™n b·∫£n m·ªõi v√† c≈© c·ªßa supabase-py.
    M·ªôt s·ªë b·∫£n (2.3.3 tr·ªü v·ªÅ tr∆∞·ªõc) kh√¥ng ch·∫•p nh·∫≠n argument 'proxy'.
    """
    try:
        return create_client(url, key)
    except TypeError as e:
        if "proxy" in str(e).lower():
            logging.warning(
                f"{LogColors.YELLOW}Phi√™n b·∫£n supabase-py hi·ªán t·∫°i kh√¥ng h·ªó tr·ª£ 'proxy'. "
                "Th·ª≠ t·∫°o client fallback...%s", LogColors.RESET
            )
            return Client(supabase_url=url, supabase_key=key)
        raise


def init_supabase(retries: int = 3, delay: int = 2):
    """
    Kh·ªüi t·∫°o k·∫øt n·ªëi Supabase v·ªõi c∆° ch·∫ø retry t·ª± ƒë·ªông.
    N·∫øu th·∫•t b·∫°i qu√° 3 l·∫ßn ‚Üí b√°o l·ªói d·ª´ng bot.
    """
    global supabase_client

    if not SUPABASE_URL or not SUPABASE_KEY:
        logging.error(f"{LogColors.RED}Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_KEY trong bi·∫øn m√¥i tr∆∞·ªùng!{LogColors.RESET}")
        raise RuntimeError("Thi·∫øu c·∫•u h√¨nh Supabase.")

    for attempt in range(1, retries + 1):
        try:
            supabase_client = safe_create_client(SUPABASE_URL, SUPABASE_KEY)
            # Test nhanh k·∫øt n·ªëi b·∫±ng table profiles
            _ = supabase_client.table("profiles").select("user_id").limit(1).execute()
            logging.info(f"{LogColors.GREEN}‚úÖ Supabase kh·ªüi t·∫°o th√†nh c√¥ng!{LogColors.RESET}")
            return
        except Exception as e:
            logging.warning(f"{LogColors.YELLOW}‚ö†Ô∏è L·∫ßn th·ª≠ {attempt}/{retries} k·∫øt n·ªëi Supabase th·∫•t b·∫°i: {e}{LogColors.RESET}")
            time.sleep(delay)

    logging.critical(f"{LogColors.RED}‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase sau {retries} l·∫ßn th·ª≠.{LogColors.RESET}")
    raise RuntimeError("Supabase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")


# === Truy c·∫≠p client an to√†n === #
def get_client() -> Client:
    global supabase_client
    if supabase_client is None:
        raise RuntimeError("Supabase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
    return supabase_client


def get_table(table_name: str):
    """Tr·∫£ v·ªÅ table object ƒë·ªÉ thao t√°c CRUD."""
    return get_client().table(table_name)


# === C√°c h√†m thao t√°c d·ªØ li·ªáu c∆° b·∫£n === #
def fetch_profile(user_id: int):
    """L·∫•y th√¥ng tin h·ªì s∆° ng∆∞·ªùi ch∆°i."""
    try:
        data = (
            get_table("profiles")
            .select("*")
            .eq("user_id", user_id)
            .execute()
        ).data
        return data[0] if data else None
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y profile {user_id}: {e}")
        return None


def ensure_profile(user_id: int):
    """
    ƒê·∫£m b·∫£o ng∆∞·ªùi ch∆°i c√≥ h·ªì s∆° trong b·∫£ng profiles.
    N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi v·ªõi s·ªë d∆∞ = 0.
    """
    profile = fetch_profile(user_id)
    if profile:
        return profile

    try:
        get_table("profiles").insert({
            "user_id": user_id,
            "balance": 0,
            "total_bet": 0,
            "total_won": 0,
            "games_played": 0,
        }).execute()
        logging.info(f"T·∫°o profile m·ªõi cho user {user_id}")
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o profile m·ªõi {user_id}: {e}")


def update_balance(user_id: int, delta: int, reason: str = "C·∫≠p nh·∫≠t s·ªë d∆∞"):
    """
    C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi ch∆°i trong b·∫£ng profiles.
    """
    profile = fetch_profile(user_id)
    if not profile:
        ensure_profile(user_id)
        profile = {"balance": 0}

    new_balance = profile["balance"] + delta
    if new_balance < 0:
        new_balance = 0  # Kh√¥ng √¢m

    try:
        get_table("profiles").update({"balance": new_balance}).eq("user_id", user_id).execute()
        logging.info(f"üí∞ {reason}: {user_id} thay ƒë·ªïi {delta}, s·ªë d∆∞ m·ªõi {new_balance}")
        return new_balance
    except Exception as e:
        logging.error(f"L·ªói update_balance({user_id}): {e}")
        return profile["balance"]
