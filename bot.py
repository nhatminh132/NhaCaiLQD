import discord
from discord.ext import commands
import json
import random
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

# --- T·∫£i Token v√† C√†i ƒë·∫∑t Bot ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# C·∫ßn b·∫≠t Intents trong Developer Portal
intents = discord.Intents.default()
intents.message_content = True
intents.members = True # B·∫Øt bu·ªôc ƒë·ªÉ ch·∫°y !bangxephang v√† !chuyenxu

# T·∫Øt l·ªánh !help m·∫∑c ƒë·ªãnh ƒë·ªÉ d√πng l·ªánh t√πy ch·ªânh
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# --- ƒê·ªãnh nghƒ©a h·∫±ng s·ªë ---
DATA_FILE = 'balances.json'
CODE_FILE = 'codes.json'
STARTING_TOKENS = 100
DAILY_REWARD = 50
DAILY_COOLDOWN_HOURS = 24 # Th·ªùi gian ch·ªù !daily

# ƒê·ªãnh nghƒ©a c√°c √¥ tr√™n b√†n Roulette
RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
# 0 l√† Xanh l√°

# --- Qu·∫£n l√Ω D·ªØ li·ªáu (Token ü™ô) ---

def load_data(filename):
    """T·∫£i d·ªØ li·ªáu t·ª´ t·ªáp JSON (balances.json ho·∫∑c codes.json)."""
    if not os.path.exists(filename):
        with open(filename, 'w') as f:
            json.dump({}, f)
        return {}
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {}

def save_data(data, filename):
    """L∆∞u d·ªØ li·ªáu v√†o t·ªáp JSON (balances.json ho·∫∑c codes.json)."""
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

def get_user_data(user_id):
    """L·∫•y d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥."""
    data = load_data(DATA_FILE)
    user_id_str = str(user_id)
    
    if user_id_str not in data:
        # C·∫•u tr√∫c d·ªØ li·ªáu m·ªõi cho ng∆∞·ªùi d√πng
        data[user_id_str] = {
            'balance': STARTING_TOKENS,
            'last_daily': None, # D√πng cho !daily
            'used_codes': []      # D√πng cho !code
        }
        save_data(data, DATA_FILE)
    
    # ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c≈© c≈©ng c√≥ c√°c tr∆∞·ªùng d·ªØ li·ªáu m·ªõi
    if 'last_daily' not in data[user_id_str]:
        data[user_id_str]['last_daily'] = None
    if 'used_codes' not in data[user_id_str]:
        data[user_id_str]['used_codes'] = []
        
    return data[user_id_str]

def update_balance(user_id, amount):
    """C·∫≠p nh·∫≠t s·ªë d∆∞ (c√≥ th·ªÉ l√† s·ªë √¢m ƒë·ªÉ tr·ª´)."""
    data = load_data(DATA_FILE)
    user_id_str = str(user_id)
    
    # ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n
    if user_id_str not in data:
        get_user_data(user_id) # T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
        data = load_data(DATA_FILE) # T·∫£i l·∫°i d·ªØ li·ªáu sau khi t·∫°o

    data[user_id_str]['balance'] += amount
    save_data(data, DATA_FILE)
    return data[user_id_str]['balance']

# --- S·ª± ki·ªán Bot ---
@bot.event
async def on_ready():
    print(f'Bot {bot.user.name} ƒë√£ s·∫µn s√†ng!')
    print('------')

# --- L·ªánh T√πy ch·ªânh !help ---
@bot.command(name='help')
async def custom_help(ctx):
    """Hi·ªÉn th·ªã b·∫£ng tr·ª£ gi√∫p t√πy ch·ªânh."""
    embed = discord.Embed(
        title="Tr·ª£ gi√∫p Bot Casino üé∞",
        description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi Bot Roulette v√† c√°c tr√≤ ch∆°i kh√°c!",
        color=discord.Color.gold()
    )
    
    embed.add_field(
        name="ü™ô L·ªánh C∆° b·∫£n", 
        value="`!help` - Hi·ªÉn th·ªã b·∫£ng tr·ª£ gi√∫p n√†y.\n"
              "`!kiemtra` - (aliases: `!bal`, `!sodu`) Xem s·ªë d∆∞ token.\n"
              "`!daily` - Nh·∫≠n th∆∞·ªüng token h√†ng ng√†y.\n"
              "`!code <m√£>` - Nh·∫≠p giftcode nh·∫≠n th∆∞·ªüng.\n"
              "`!chuyenxu @user <s·ªë_ti·ªÅn>` - Chuy·ªÉn token cho ng∆∞·ªùi kh√°c.\n"
              "`!bangxephang` - (aliases: `!top`) Xem 10 ng∆∞·ªùi gi√†u nh·∫•t.",
        inline=False
    )
    
    embed.add_field(
        name="üé≤ Tr√≤ ch∆°i",
        value="`!tungxu <s·ªë_ti·ªÅn> <s·∫•p/ng·ª≠a>` - (aliases: `!coinflip`) C∆∞·ª£c 50/50.\n"
              "`!xucxac <s·ªë_ti·ªÅn> <s·ªë_ƒëo√°n>` - (aliases: `!dice`) C∆∞·ª£c ƒëo√°n s·ªë (1-6), th·∫Øng 1 ƒÉn 5.",
        inline=False
    )

    embed.add_field(
        name="üé∞ L·ªánh Roulette (`!quay`)",
        value="`!quay <s·ªë_ti·ªÅn> <lo·∫°i_c∆∞·ª£c>`\n"
              "**Lo·∫°i c∆∞·ª£c (1 ƒÉn 1):**\n"
              "‚Ä¢ `ƒë·ªè`, `ƒëen`\n"
              "‚Ä¢ `l·∫ª`, `ch·∫µn`\n"
              "‚Ä¢ `n·ª≠a1` (s·ªë 1-18)\n"
              "‚Ä¢ `n·ª≠a2` (s·ªë 19-36)\n"
              "**Lo·∫°i c∆∞·ª£c (1 ƒÉn 2):**\n"
              "‚Ä¢ `t√°1` (s·ªë 1-12)\n"
              "‚Ä¢ `t√°2` (s·ªë 13-24)\n"
              "‚Ä¢ `t√°3` (s·ªë 25-36)\n"
              "**Lo·∫°i c∆∞·ª£c (1 ƒÉn 35):**\n"
              "‚Ä¢ M·ªôt s·ªë c·ª• th·ªÉ (v√≠ d·ª•: `13`)",
        inline=False
    )
    
    embed.set_footer(text="Ch√∫c b·∫°n may m·∫Øn!")
    await ctx.send(embed=embed)


# --- L·ªánh Token & X√£ h·ªôi ---

@bot.command(name='kiemtra', aliases=['balance', 'bal', 'sodu'])
async def balance_check(ctx):
    """Ki·ªÉm tra s·ªë d∆∞ token ü™ô."""
    user_data = get_user_data(ctx.author.id)
    bal = user_data['balance']
    await ctx.send(f'ü™ô {ctx.author.mention}, b·∫°n ƒëang c√≥ **{bal}** token.')

@bot.command(name='daily')
async def daily_reward(ctx):
    """Nh·∫≠n th∆∞·ªüng token h√†ng ng√†y."""
    user_id = ctx.author.id
    user_data = get_user_data(user_id)
    last_daily_str = user_data.get('last_daily')
    
    if last_daily_str:
        last_daily_time = datetime.fromisoformat(last_daily_str)
        cooldown = timedelta(hours=DAILY_COOLDOWN_HOURS)
        
        if datetime.now() < last_daily_time + cooldown:
            time_left = (last_daily_time + cooldown) - datetime.now()
            hours_left = int(time_left.total_seconds() // 3600)
            minutes_left = int((time_left.total_seconds() % 3600) // 60)
            await ctx.send(f'{ctx.author.mention}, b·∫°n c·∫ßn ch·ªù **{hours_left} gi·ªù {minutes_left} ph√∫t** n·ªØa ƒë·ªÉ nh·∫≠n th∆∞·ªüng.')
            return

    # Cho ph√©p nh·∫≠n th∆∞·ªüng
    new_balance = update_balance(user_id, DAILY_REWARD)
    
    # C·∫≠p nh·∫≠t th·ªùi gian
    data = load_data(DATA_FILE)
    data[str(user_id)]['last_daily'] = datetime.now().isoformat()
    save_data(data, DATA_FILE)
    
    await ctx.send(f'üéâ {ctx.author.mention}, b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{DAILY_REWARD}** token th∆∞·ªüng h√†ng ng√†y! S·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô.')

@bot.command(name='code')
async def redeem_code(ctx, code_to_redeem: str):
    """Nh·∫≠p giftcode ƒë·ªÉ nh·∫≠n th∆∞·ªüng."""
    user_id = ctx.author.id
    user_data = get_user_data(user_id)
    code_to_redeem = code_to_redeem.upper() # Chuy·ªÉn code v·ªÅ ch·ªØ hoa
    
    # T·∫£i danh s√°ch code
    all_codes = load_data(CODE_FILE)
    
    if code_to_redeem not in all_codes:
        await ctx.send(f'M√£ `{code_to_redeem}` kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n.')
        return
        
    if code_to_redeem in user_data['used_codes']:
        await ctx.send(f'B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ `{code_to_redeem}` n√†y r·ªìi.')
        return
        
    # H·ª£p l·ªá -> Trao th∆∞·ªüng
    reward = all_codes[code_to_redeem]
    new_balance = update_balance(user_id, reward)
    
    # ƒê√°nh d·∫•u code ƒë√£ d√πng cho user
    data = load_data(DATA_FILE)
    data[str(user_id)]['used_codes'].append(code_to_redeem)
    save_data(data, DATA_FILE)
    
    # (T√πy ch·ªçn) X√≥a code n·∫øu mu·ªën n√≥ ch·ªâ d√πng 1 l·∫ßn TR√äN TO√ÄN SERVER
    # del all_codes[code_to_redeem]
    # save_data(all_codes, CODE_FILE)
    
    await ctx.send(f'üéÅ {ctx.author.mention}, b·∫°n ƒë√£ nh·∫≠p th√†nh c√¥ng m√£ `{code_to_redeem}` v√† nh·∫≠n ƒë∆∞·ª£c **{reward}** token! S·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô.')

@bot.command(name='bangxephang', aliases=['top'])
async def leaderboard(ctx, top_n: int = 10):
    """Hi·ªÉn th·ªã 10 ng∆∞·ªùi gi√†u nh·∫•t server."""
    if top_n <= 0:
        top_n = 10
        
    data = load_data(DATA_FILE)
    if not data:
        await ctx.send('Ch∆∞a c√≥ ai trong b·∫£ng x·∫øp h·∫°ng.')
        return

    # S·∫Øp x·∫øp data
    # S·∫Øp x·∫øp theo 'balance', x·ª≠ l√Ω tr∆∞·ªùng h·ª£p user kh√¥ng c√≥ 'balance'
    sorted_users = sorted(
        data.items(), 
        key=lambda item: item[1].get('balance', 0), 
        reverse=True
    )
    
    embed = discord.Embed(
        title=f"üèÜ B·∫£ng X·∫øp H·∫°ng {top_n} ƒê·∫°i Gia üèÜ",
        color=discord.Color.gold()
    )
    
    rank_count = 1
    for user_id_str, user_data in sorted_users:
        if rank_count > top_n:
            break
            
        balance = user_data.get('balance', 0)
        
        # L·∫•y t√™n ng∆∞·ªùi d√πng
        user = ctx.guild.get_member(int(user_id_str))
        if user:
            user_name = user.display_name
        else:
            user_name = f"Ng∆∞·ªùi d√πng (ID: ...{user_id_str[-4:]})" # Hi·ªÉn th·ªã n·∫øu user r·ªùi server
        
        embed.add_field(
            name=f"#{rank_count}: {user_name}",
            value=f"**{balance}** ü™ô",
            inline=False
        )
        rank_count += 1
        
    await ctx.send(embed=embed)

@bot.command(name='chuyenxu', aliases=['give', 'transfer'])
async def transfer_tokens(ctx, recipient: discord.Member, amount: int):
    """Chuy·ªÉn token cho ng∆∞·ªùi d√πng kh√°c. C√∫ ph√°p: !chuyenxu @user <s·ªë_ti·ªÅn>"""
    sender_id = ctx.author.id
    recipient_id = recipient.id

    if sender_id == recipient_id:
        await ctx.send('B·∫°n kh√¥ng th·ªÉ t·ª± chuy·ªÉn cho ch√≠nh m√¨nh!')
        return
        
    if amount <= 0:
        await ctx.send('S·ªë ti·ªÅn chuy·ªÉn ph·∫£i l·ªõn h∆°n 0!')
        return
        
    sender_balance = get_user_data(sender_id)['balance']
    
    if sender_balance < amount:
        await ctx.send(f'B·∫°n kh√¥ng ƒë·ªß ti·ªÅn. B·∫°n ch·ªâ c√≥ **{sender_balance}** ü™ô.')
        return
        
    # Th·ª±c hi·ªán chuy·ªÉn
    update_balance(sender_id, -amount)
    new_recipient_balance = update_balance(recipient_id, amount)
    
    await ctx.send(f'‚úÖ {ctx.author.mention} ƒë√£ chuy·ªÉn **{amount}** ü™ô cho {recipient.mention}!')
    await recipient.send(f'B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{amount}** ü™ô t·ª´ {ctx.author.mention}. S·ªë d∆∞ m·ªõi: **{new_recipient_balance}** ü™ô.')
    
@transfer_tokens.error
async def transfer_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send('C√∫ ph√°p sai! `!chuyenxu @T√™nNg∆∞·ªùiD√πng <S·ªëTi·ªÅn>`')
    elif isinstance(error, commands.BadArgument):
        await ctx.send('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë√≥ ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.')
    else:
        print(f"L·ªói !chuyenxu: {error}")

# --- L·ªánh Tr√≤ ch∆°i M·ªõi ---

@bot.command(name='tungxu', aliases=['coinflip'])
async def coinflip(ctx, bet_amount: int, choice: str):
    """C∆∞·ª£c tung ƒë·ªìng xu. C√∫ ph√°p: !tungxu <s·ªë_ti·ªÅn> <s·∫•p/ng·ª≠a>"""
    user_id = ctx.author.id
    balance = get_user_data(user_id)['balance']
    choice = choice.lower().strip()

    if choice not in ['s·∫•p', 'ng·ª≠a', 'sap', 'ngua']:
        await ctx.send('C√∫ ph√°p sai! Ph·∫£i c∆∞·ª£c `s·∫•p` ho·∫∑c `ng·ª≠a`.')
        return
    if bet_amount <= 0:
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!')
        return
    if bet_amount > balance:
        await ctx.send(f'B·∫°n kh√¥ng ƒë·ªß token. B·∫°n ch·ªâ c√≥ {balance} ü™ô.')
        return
        
    # Tung ƒë·ªìng xu
    result = random.choice(['s·∫•p', 'ng·ª≠a'])
    
    embed = discord.Embed(
        title=f"Tung ƒë·ªìng xu ü™ô... K·∫øt qu·∫£ l√† **{result.upper()}**!",
        color=discord.Color.blue()
    )

    if (choice == result) or (choice == 'sap' and result == 's·∫•p') or (choice == 'ngua' and result == 'ng·ª≠a'):
        # Th·∫Øng
        new_balance = update_balance(user_id, bet_amount)
        embed.description = f"üéâ B·∫°n ƒëo√°n ƒë√∫ng! B·∫°n th·∫Øng **{bet_amount}** token.\nS·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô."
        embed.color = discord.Color.green()
    else:
        # Thua
        new_balance = update_balance(user_id, -bet_amount)
        embed.description = f"üò¢ B·∫°n ƒëo√°n sai! B·∫°n m·∫•t **{bet_amount}** token.\nS·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô."
        embed.color = discord.Color.red()
        
    await ctx.send(embed=embed)

@bot.command(name='xucxac', aliases=['dice'])
async def dice_roll(ctx, bet_amount: int, guess: int):
    """C∆∞·ª£c x√∫c x·∫Øc 1 ƒÉn 5. C√∫ ph√°p: !xucxac <s·ªë_ti·ªÅn> <s·ªë_ƒëo√°n (1-6)>"""
    user_id = ctx.author.id
    balance = get_user_data(user_id)['balance']

    if not 1 <= guess <= 6:
        await ctx.send('C√∫ ph√°p sai! Ph·∫£i ƒëo√°n m·ªôt s·ªë t·ª´ `1` ƒë·∫øn `6`.')
        return
    if bet_amount <= 0:
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!')
        return
    if bet_amount > balance:
        await ctx.send(f'B·∫°n kh√¥ng ƒë·ªß token. B·∫°n ch·ªâ c√≥ {balance} ü™ô.')
        return

    # Gieo x√∫c x·∫Øc
    result = random.randint(1, 6)
    
    embed = discord.Embed(
        title=f"Gieo x√∫c x·∫Øc üé≤... K·∫øt qu·∫£ l√† **{result}**!",
        color=discord.Color.dark_purple()
    )

    if guess == result:
        # Th·∫Øng (1 ƒÉn 5 -> nh·∫≠n l·∫°i v·ªën + 5 l·∫ßn c∆∞·ª£c)
        winnings = bet_amount * 5
        new_balance = update_balance(user_id, winnings)
        embed.description = f"üéâ Ch√≠nh x√°c! B·∫°n th·∫Øng **{winnings}** token.\nS·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô."
        embed.color = discord.Color.green()
    else:
        # Thua
        new_balance = update_balance(user_id, -bet_amount)
        embed.description = f"üò¢ B·∫°n ƒëo√°n sai! B·∫°n m·∫•t **{bet_amount}** token.\nS·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô."
        embed.color = discord.Color.red()

    await ctx.send(embed=embed)

# --- L·ªánh Roulette (ƒê√É N√ÇNG C·∫§P) ---

@bot.command(name='quay', aliases=['roulette'])
async def roulette(ctx, bet_amount: int, bet_type: str):
    """Ch∆°i Roulette (N√¢ng cao). C√∫ ph√°p: !quay <s·ªë_ti·ªÅn> <lo·∫°i_c∆∞·ª£c>"""
    
    user_id = ctx.author.id
    balance = get_user_data(user_id)['balance']
    bet_type = bet_type.lower().strip()

    # 1. Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c∆∞·ª£c
    if bet_amount <= 0:
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!')
        return
    if bet_amount > balance:
        await ctx.send(f'B·∫°n kh√¥ng ƒë·ªß token. B·∫°n ch·ªâ c√≥ {balance} ü™ô.')
        return

    # 2. Quay s·ªë
    spin_result = random.randint(0, 36)
    
    # X√°c ƒë·ªãnh m√†u s·∫Øc k·∫øt qu·∫£
    if spin_result == 0:
        spin_color = 'xanh l√° üü©'
    elif spin_result in RED_NUMBERS:
        spin_color = 'ƒë·ªè üü•'
    else:
        spin_color = 'ƒëen ‚¨õ'

    # 3. Ki·ªÉm tra th·∫Øng/thua
    winnings = 0
    payout_rate = 0 # T·ª∑ l·ªá th·∫Øng (vd: 1 ƒÉn 1, 1 ƒÉn 2)
    is_win = False

    try:
        # Tr∆∞·ªùng h·ª£p c∆∞·ª£c v√†o m·ªôt S·ªê c·ª• th·ªÉ (0-36)
        bet_number = int(bet_type)
        if 0 <= bet_number <= 36:
            if spin_result == bet_number:
                payout_rate = 35
                is_win = True
        else:
            await ctx.send('C∆∞·ª£c s·ªë kh√¥ng h·ª£p l·ªá. Ch·ªâ c∆∞·ª£c t·ª´ `0` ƒë·∫øn `36`.')
            return
            
    except ValueError:
        # Tr∆∞·ªùng h·ª£p c∆∞·ª£c v√†o LO·∫†I
        if bet_type in ['ƒë·ªè', 'red']:
            if spin_result in RED_NUMBERS:
                payout_rate = 1
                is_win = True
        elif bet_type in ['ƒëen', 'black']:
            if spin_result in BLACK_NUMBERS:
                payout_rate = 1
                is_win = True
        elif bet_type in ['l·∫ª', 'odd']:
            if spin_result != 0 and spin_result % 2 != 0:
                payout_rate = 1
                is_win = True
        elif bet_type in ['ch·∫µn', 'even']:
            if spin_result != 0 and spin_result % 2 == 0:
                payout_rate = 1
                is_win = True
        
        # --- C∆∞·ª£c N·ª≠a (1 ƒÉn 1) ---
        elif bet_type in ['n·ª≠a1', '1-18']:
            if 1 <= spin_result <= 18:
                payout_rate = 1
                is_win = True
        elif bet_type in ['n·ª≠a2', '19-36']:
            if 19 <= spin_result <= 36:
                payout_rate = 1
                is_win = True
                
        # --- C∆∞·ª£c T√° (1 ƒÉn 2) ---
        elif bet_type in ['t√°1', '1-12']:
            if 1 <= spin_result <= 12:
                payout_rate = 2
                is_win = True
        elif bet_type in ['t√°2', '13-24']:
            if 13 <= spin_result <= 24:
                payout_rate = 2
                is_win = True
        elif bet_type in ['t√°3', '25-36']:
            if 25 <= spin_result <= 36:
                payout_rate = 2
                is_win = True
                
        else:
            await ctx.send('Lo·∫°i c∆∞·ª£c kh√¥ng h·ª£p l·ªá. G√µ `!help` ƒë·ªÉ xem c√°c lo·∫°i c∆∞·ª£c.')
            return

    # 4. X√¢y d·ª±ng tin nh·∫Øn k·∫øt qu·∫£
    result_message = f"**K·∫øt qu·∫£ quay: {spin_result} ({spin_color})**\n\n"
    result_message += f"{ctx.author.mention} ƒë√£ c∆∞·ª£c **{bet_amount}** ü™ô v√†o **{bet_type}**.\n"

    if is_win:
        winnings = bet_amount * payout_rate
        new_balance = update_balance(user_id, winnings)
        result_message += f"üéâ **B·∫°n ƒë√£ th·∫Øng!** (1 ƒÉn {payout_rate})\nB·∫°n nh·∫≠n ƒë∆∞·ª£c **{winnings}** token.\n"
        embed_color = discord.Color.green()
    else:
        new_balance = update_balance(user_id, -bet_amount)
        result_message += f"üò¢ **B·∫°n ƒë√£ thua!**\nB·∫°n m·∫•t **{bet_amount}** token.\n"
        embed_color = discord.Color.red()
        
    result_message += f"S·ªë d∆∞ m·ªõi: **{new_balance}** ü™ô."

    # G·ª≠i k·∫øt qu·∫£ b·∫±ng Embed
    embed = discord.Embed(
        title="K·∫øt Qu·∫£ Roulette üé∞",
        description=result_message,
        color=embed_color
    )
    await ctx.send(embed=embed)

# --- X·ª≠ l√Ω l·ªói chung cho c√°c l·ªánh tr√≤ ch∆°i ---
@coinflip.error
@dice_roll.error
@roulette.error
async def game_error(ctx, error):
    """X·ª≠ l√Ω l·ªói nh·∫≠p li·ªáu chung cho c√°c tr√≤ ch∆°i."""
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f'C√∫ ph√°p sai! G√µ `!help` ƒë·ªÉ xem h∆∞·ªõng d·∫´n l·ªánh `{ctx.command.name}`.')
    elif isinstance(error, commands.BadArgument):
        await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c ho·∫∑c s·ªë ƒëo√°n ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá.')
    else:
        print(f"L·ªói l·ªánh {ctx.command.name}: {error}") # In l·ªói ra console ƒë·ªÉ debug
        await ctx.send('ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.')

# --- Ch·∫°y Bot ---
if TOKEN:
    bot.run(TOKEN)
else:
    print("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong file .env")
