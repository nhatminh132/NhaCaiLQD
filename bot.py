# -*- coding: utf-8 -*-
import discord
from discord.ext import commands, tasks
from discord import ui
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone, date, time
from supabase import create_client, Client
import typing
import random
import asyncio
import math
import discord.utils
import pytz # Th√™m th∆∞ vi·ªán m√∫i gi·ªù

# Import t·ªáp keep_alive
from keep_alive import keep_alive

# --- T·∫£i Token v√† C√†i ƒë·∫∑t Bot ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

# --- C√†i ƒë·∫∑t Supabase ---
if not SUPABASE_URL or not SUPABASE_KEY: print("L·ªñI: Kh√¥ng t√¨m th·∫•y SUPABASE_URL ho·∫∑c SUPABASE_KEY"); exit()
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# C√†i ƒë·∫∑t Bot Discord
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# --- BI·∫æN TO√ÄN C·ª§C CHO GAME ---
game_message = None # Tin nh·∫Øn game T√†i X·ªâu
game_channel_id = None # K√™nh game T√†i X·ªâu
current_bets = {} # C∆∞·ª£c v√°n T√†i X·ªâu hi·ªán t·∫°i
bot.blackjack_games = {} # L∆∞u c√°c v√°n Blackjack
bot.mines_games = {} # L∆∞u c√°c v√°n D√≤ M√¨n
bot.users_in_animation = set() # D√πng ƒë·ªÉ kh√≥a l·ªánh khi game c√≥ hi·ªáu ·ª©ng
bot.guess_the_number_game = None # L∆∞u state game ƒêo√°n S·ªë

# --- ƒê·ªäNH NGHƒ®A H·∫∞NG S·ªê ---
STARTING_TOKENS = 100
DAILY_REWARD = 50
DAILY_COOLDOWN_HOURS = 24
ADMIN_ROLE = "Bot Admin"
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh') # M√∫i gi·ªù VN
LOTTERY_DRAW_TIME = time(18, 0, 0, tzinfo=VIETNAM_TZ) # 18:00 VN h√†ng ng√†y
LOTTERY_TICKET_PRICE = 100 # Gi√° v√© s·ªë

# (C√°c h·∫±ng s·ªë game kh√°c gi·ªØ nguy√™n)
RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
BAU_CUA_FACES = {'b·∫ßu': 'B·∫ßu üçê', 'bau': 'B·∫ßu üçê', 'üçê': 'B·∫ßu üçê', 'cua': 'Cua ü¶Ä', 'ü¶Ä': 'Cua ü¶Ä', 't√¥m': 'T√¥m ü¶ê', 'tom': 'T√¥m ü¶ê', 'ü¶ê': 'T√¥m ü¶ê', 'c√°': 'C√° üêü', 'ca': 'C√° üêü', 'üêü': 'C√° üêü', 'g√†': 'G√† üêì', 'ga': 'G√† üêì', 'üêì': 'G√† üêì', 'nai': 'Nai ü¶å', 'ü¶å': 'Nai ü¶å'}
BAU_CUA_LIST = ['B·∫ßu üçê', 'Cua ü¶Ä', 'T√¥m ü¶ê', 'C√° üêü', 'G√† üêì', 'Nai ü¶å']
NUM_HORSES = 6; RACE_LENGTH = 20
SLOT_SYMBOLS = [('üçí', 10, 10), ('üçã', 9, 15), ('üçä', 8, 20), ('üçì', 5, 30), ('üîî', 3, 50), ('üíé', 2, 100), ('7Ô∏è‚É£', 1, 200)]
SLOT_WHEEL, SLOT_WEIGHTS, SLOT_PAYOUTS = [], [], {}
for (symbol, weight, payout) in SLOT_SYMBOLS: SLOT_WHEEL.append(symbol); SLOT_WEIGHTS.append(weight); SLOT_PAYOUTS[symbol] = payout
CARD_SUITS = ['‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è']
CARD_RANKS = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10, 'A': 11} # A=11 (ho·∫∑c 1), JQK=10 trong Blackjack & Baccarat

# --- C√ÄI ƒê·∫∂T RATE LIMIT TO√ÄN C·ª§C ---
global_cooldown = commands.CooldownMapping.from_cooldown(30, 60.0, commands.BucketType.default)

# --- QU·∫¢N L√ù D·ªÆ LI·ªÜU (SUPABASE) ---
def get_user_data(user_id: int) -> typing.Dict:
    try:
        response = supabase.table('profiles').select('*').eq('user_id', user_id).single().execute()
        return response.data
    except Exception as e:
        # User ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
        if "JSON object requested" in str(e): # L·ªói ph·ªï bi·∫øn khi .single() kh√¥ng t√¨m th·∫•y
             try:
                 insert_response = supabase.table('profiles').insert({'user_id': user_id, 'balance': STARTING_TOKENS, 'last_daily': None, 'used_codes': [], 'total_bet': 0, 'total_won': 0, 'games_played': 0}).execute()
                 return insert_response.data[0]
             except Exception as e2:
                 print(f"L·ªói khi t·∫°o user m·ªõi {user_id}: {e2}")
                 return None
        else:
             print(f"L·ªói khi get_user_data cho {user_id}: {e}")
             return None

def update_balance(user_id: int, amount: int) -> typing.Optional[int]:
    try:
        response = supabase.rpc('adjust_balance', {'user_id_input': user_id, 'amount_input': amount}).execute()
        return response.data
    except Exception as e:
        print(f"L·ªói khi update_balance cho {user_id}: {e}")
        # User c√≥ th·ªÉ ch∆∞a t·ªìn t·∫°i, th·ª≠ t·∫°o
        user_data = get_user_data(user_id)
        if user_data: # N·∫øu t·∫°o th√†nh c√¥ng, th·ª≠ l·∫°i
             try:
                 response = supabase.rpc('adjust_balance', {'user_id_input': user_id, 'amount_input': amount}).execute()
                 return response.data
             except Exception as e2: print(f"L·ªói l·∫ßn 2 khi update_balance: {e2}")
        return None

def update_profile_stats(user_id: int, bet_amount: int, net_gain: int): # S·ª≠a winnings th√†nh net_gain
    """C·∫≠p nh·∫≠t total_bet, total_won, games_played."""
    try:
        current_stats = supabase.table('profiles').select('total_bet', 'total_won', 'games_played').eq('user_id', user_id).single().execute().data
        if not current_stats: return

        new_total_bet = current_stats.get('total_bet', 0) + bet_amount
        # Total won ch·ªâ c·ªông ph·∫ßn l·ªùi (n·∫øu net_gain > 0)
        new_total_won = current_stats.get('total_won', 0) + max(0, net_gain)
        new_games_played = current_stats.get('games_played', 0) + 1

        supabase.table('profiles').update({
            'total_bet': new_total_bet,
            'total_won': new_total_won,
            'games_played': new_games_played
        }).eq('user_id', user_id).execute()
    except Exception as e:
        print(f"L·ªói khi update_profile_stats cho {user_id}: {e}")

def get_jackpot_pool(game_name: str):
    try:
        table_name = 'jackpot' if game_name == 'taixiu' else 'progressive_jackpot'
        data = supabase.table(table_name).select('pool_amount').eq('game_name', game_name).single().execute().data
        return data['pool_amount'] if data else 0
    except Exception as e:
        print(f"L·ªói khi l·∫•y jackpot {game_name}: {e}"); return 0

def update_jackpot_pool(game_name: str, amount: int):
    try:
        table_name = 'jackpot' if game_name == 'taixiu' else 'progressive_jackpot'
        current_pool = get_jackpot_pool(game_name)
        new_pool = max(0, current_pool + amount)
        supabase.table(table_name).update({'pool_amount': new_pool}).eq('game_name', game_name).execute()
        return new_pool
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t jackpot {game_name}: {e}"); return get_jackpot_pool(game_name)

def get_taixiu_history():
    try:
        data = supabase.table('jackpot').select('history').eq('game_name', 'taixiu').single().execute().data
        return data['history'][-10:] if data and data['history'] else []
    except Exception as e: print(f"Loi khi lay history taixiu: {e}"); return []

# --- H√ÄM KI·ªÇM TRA & S·ª∞ KI·ªÜN BOT ---
@bot.before_invoke
async def global_check_before_command(ctx):
    if ctx.command and ctx.command.name == 'help': return # S·ª≠a l·ªói check help
    bucket = global_cooldown.get_bucket(ctx.message)
    retry_after = bucket.update_rate_limit()
    if retry_after: raise commands.CommandOnCooldown(bucket, retry_after, commands.BucketType.default)

@bot.event
async def on_ready():
    bot.add_view(TaiXiuGameView())
    lottery_draw_task.start()
    print(f'Bot {bot.user.name} ƒë√£ s·∫µn s√†ng!'); print('------')

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        seconds = error.retry_after; await ctx.send(f"‚è≥ Bot ƒëang x·ª≠ l√Ω qu√° nhi·ªÅu y√™u c·∫ßu! Vui l√≤ng th·ª≠ l·∫°i sau **{seconds:.1f} gi√¢y**.", delete_after=5)
    elif isinstance(error, commands.MissingRole):
        await ctx.send(f"R·∫•t ti·∫øc {ctx.author.mention}, b·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y. C·∫ßn role `{ADMIN_ROLE}`.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f'C√∫ ph√°p sai! G√µ `!help` ƒë·ªÉ xem h∆∞·ªõng d·∫´n l·ªánh `{ctx.command.name}`.')
    elif isinstance(error, commands.BadArgument):
        if ctx.command and ctx.command.name in ['admin_give', 'admin_set', 'chuyenxu', 'profile', 'admin_view', 'admin_resetdaily']: await ctx.send('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë√≥ ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.')
        elif ctx.command and ctx.command.name == 'lottery_buy': await ctx.send('Vui l√≤ng nh·∫≠p 6 s·ªë h·ª£p l·ªá (1-45).')
        elif ctx.command and ctx.command.name == 'admin_announce': await ctx.send('Kh√¥ng t√¨m th·∫•y k√™nh ƒë√≥.')
        else: await ctx.send('S·ªë ti·ªÅn c∆∞·ª£c ho·∫∑c s·ªë ƒëo√°n/s·ªë ng·ª±a/s·ªë bom kh√¥ng h·ª£p l·ªá.')
    elif isinstance(error, commands.CheckFailure):
        await ctx.send(f"‚è≥ {ctx.author.mention}, b·∫°n ƒëang c√≥ m·ªôt tr√≤ ch∆°i kh√°c ƒëang ch·∫°y. Vui l√≤ng ch·ªù cho n√≥ k·∫øt th√∫c!", ephemeral=True, delete_after=5)
    else:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ l·ªánh '{ctx.command.name if ctx.command else 'Unknown'}': {error}")
        await ctx.send('ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.')

def is_user_in_game(ctx):
    user_id = ctx.author.id
    if user_id in bot.blackjack_games: return False
    if user_id in bot.mines_games: return False
    if bot.guess_the_number_game and user_id in bot.guess_the_number_game.participants: return False # Check game ƒëo√°n s·ªë
    if user_id in bot.users_in_animation: return False
    return True

# --- L·ªÜNH !HELP ---
@bot.command(name='help')
async def custom_help(ctx):
    embed = discord.Embed(title="Tr·ª£ gi√∫p Bot Casino üé∞", color=discord.Color.gold())
    embed.add_field(name="ü™ô L·ªánh C∆° b·∫£n", value="`!help`\n`!kiemtra` (`!bal`, `!sodu`)\n`!daily`\n`!code <m√£>`\n`!chuyenxu @user <s·ªë_ti·ªÅn>`\n`!bangxephang` (`!top`)\n`!profile [@user]` - Xem h·ªì s∆°", inline=False)
    embed.add_field(name="üé≤ Tr√≤ ch∆°i (G√µ l·ªánh)", value="`!slots <s·ªë_ti·ªÅn>` - Ch∆°i m√°y x√®ng.\n`!hilo <s·ªë_ti·ªÅn> <cao/th·∫•p>` - ƒêo√°n l√° b√†i ti·∫øp theo.\n`!tungxu <s·ªë_ti·ªÅn> <s·∫•p/ng·ª≠a>` - C∆∞·ª£c 50/50.\n`!xucxac <s·ªë_ti·ªÅn> <s·ªë_ƒëo√°n>` - ƒêo√°n s·ªë (1-6), th·∫Øng 1 ƒÉn 5.\n`!baucua <s·ªë_ti·ªÅn> <linh_v·∫≠t>` - C∆∞·ª£c B·∫ßu Cua T√¥m C√°.\n`!duangua <s·ªë_ti·ªÅn> <s·ªë_ng·ª±a>` - C∆∞·ª£c ƒëua ng·ª±a (1-6), th·∫Øng 1 ƒÉn 4.\n`!quay <s·ªë_ti·ªÅn> <lo·∫°i_c∆∞·ª£c>` - Ch∆°i Roulette.\n`!baccarat <s·ªë_ti·ªÅn> <player/banker/tie>`\n`!lottery buy <s1>..<s6>` - Mua v√© s·ªë (1-45)\n`!lottery result` - Xem k·∫øt qu·∫£ XS\n`!guessthenumber start <s·ªë_ti·ªÅn>` - B·∫Øt ƒë·∫ßu ƒëo√°n s·ªë\n`!guess <s·ªë>` - ƒêo√°n s·ªë (1-100)", inline=False)
    embed.add_field(name="üÉè Tr√≤ ch∆°i (Giao di·ªán UI)", value="`!blackjack <s·ªë_ti·ªÅn>` (`!bj`)\n`!mines <s·ªë_ti·ªÅn> <s·ªë_bom>`", inline=False)
    embed.add_field(name="üéÆ Game 24/7 (D√πng N√∫t)", value="T√¨m k√™nh **T√†i X·ªâu** v√† d√πng N√∫t ƒë·ªÉ c∆∞·ª£c.", inline=False)
    embed.add_field(name="üõ†Ô∏è L·ªánh Admin", value="`!admin_give @user <s·ªë_ti·ªÅn>`\n`!admin_set @user <s·ªë_ti·ªÅn>`\n`!admin_createcode <code> <reward>`\n`!admin_deletecode <code>`\n`!start_taixiu`\n`!stop_taixiu`\n`!admin_view @user` - Xem th√¥ng tin user\n`!admin_resetdaily @user` - Reset daily\n`!admin_announce #channel <n·ªôi dung>`", inline=False)
    embed.set_footer(text="Ch√∫c b·∫°n may m·∫Øn!"); await ctx.send(embed=embed)

# --- L·ªÜNH C∆† B·∫¢N V√Ä X√É H·ªòI ---
# (!kiemtra, !daily, !code, !bangxephang, !chuyenxu, !profile gi·ªØ nguy√™n)
# ... (D√°n code c√°c l·ªánh n√†y t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...

# --- L·ªÜNH ADMIN ---
# (!admin_give, !admin_set, !admin_createcode, !admin_deletecode, !admin_view, !admin_resetdaily, !admin_announce gi·ªØ nguy√™n)
# ... (D√°n code c√°c l·ªánh n√†y t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...

# --- GAME 24/7: T√ÄI X·ªàU (UI) ---
# (To√†n b·ªô logic game T√†i X·ªâu 24/7 gi·ªØ nguy√™n, bao g·ªìm BetModal, TaiXiuGameView, get_bet_totals, tai_xiu_game_loop, start/stop_taixiu)
# ... (D√°n code game T√†i X·ªâu UI t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...

# --- GAME THEO L·ªÜNH (C√ì HI·ªÜU ·ª®NG V√Ä KH√ìA) ---
# (!slots, !hilo, !tungxu, !xucxac, !baucua, !duangua, !quay gi·ªØ nguy√™n, ch·ªâ c·∫ßn th√™m update_profile_stats)

@bot.command(name='slots', aliases=['slot'])
@commands.check(is_user_in_game)
async def slots(ctx, bet_amount: int):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game slots v·ªõi hi·ªáu ·ª©ng v√† jackpot)
        net_gain = winnings if is_jackpot else (winnings - jackpot_contrib)
        update_profile_stats(user_id, bet_amount, net_gain) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='hilo', aliases=['caothap'])
@commands.check(is_user_in_game)
async def hilo(ctx, bet_amount: int, choice: str):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game hilo v·ªõi hi·ªáu ·ª©ng)
        payout = bet_amount if is_win else -bet_amount
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='tungxu', aliases=['coinflip'])
@commands.check(is_user_in_game)
async def coinflip(ctx, bet_amount: int, choice: str):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game tungxu v·ªõi hi·ªáu ·ª©ng)
        payout = bet_amount if is_win else -bet_amount # is_win ƒë∆∞·ª£c x√°c ƒë·ªãnh trong logic
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='xucxac', aliases=['dice'])
@commands.check(is_user_in_game)
async def dice_roll(ctx, bet_amount: int, guess: int):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game xucxac v·ªõi hi·ªáu ·ª©ng)
        is_win = (guess == result) # result ƒë∆∞·ª£c x√°c ƒë·ªãnh trong logic
        payout = winnings if is_win else -bet_amount
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='baucua', aliases=['bc'])
@commands.check(is_user_in_game)
async def bau_cua(ctx, bet_amount: int, choice: str):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game baucua v·ªõi hi·ªáu ·ª©ng)
        is_win = (hits > 0) # hits ƒë∆∞·ª£c x√°c ƒë·ªãnh trong logic
        payout = winnings if is_win else -bet_amount
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='duangua', aliases=['race'])
@commands.check(is_user_in_game)
async def dua_ngua(ctx, bet_amount: int, horse_number: int):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game duangua v·ªõi hi·ªáu ·ª©ng)
        payout = winnings if is_win else -bet_amount # is_win ƒë∆∞·ª£c x√°c ƒë·ªãnh trong logic
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

@bot.command(name='quay', aliases=['roulette'])
@commands.check(is_user_in_game)
async def roulette(ctx, bet_amount: int, bet_type: str):
    user_id, balance = ctx.author.id, get_user_data(ctx.author.id)['balance'] # ... (ki·ªÉm tra input)
    bot.users_in_animation.add(user_id)
    try:
        # ... (logic game roulette v·ªõi hi·ªáu ·ª©ng v√† c∆∞·ª£c ph·ª©c t·∫°p)
        payout = winnings if is_win else -bet_amount # is_win ƒë∆∞·ª£c x√°c ƒë·ªãnh trong logic
        update_profile_stats(user_id, bet_amount, payout) # C·∫≠p nh·∫≠t stats
        # ... (hi·ªÉn th·ªã k·∫øt qu·∫£)
    finally: bot.users_in_animation.discard(user_id)

# --- GAME M·ªöI THEO L·ªÜNH ---
# (!baccarat, !lottery group, !guessthenumber group gi·ªØ nguy√™n)
# ... (D√°n code c√°c game n√†y t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...

# --- GAME GIAO DI·ªÜN UI (BLACKJACK & MINES) ---
# (To√†n b·ªô code Blackjack v√† Mines gi·ªØ nguy√™n, bao g·ªìm c√°c Class View, Button v√† l·ªánh ch√≠nh)
# ... (D√°n code game Blackjack UI t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...
# ... (D√°n code game Mines UI t·ª´ phi√™n b·∫£n tr∆∞·ªõc) ...

# --- X·ªî S·ªê TASK ---
# (Task lottery_draw_task gi·ªØ nguy√™n)
@tasks.loop(time=LOTTERY_DRAW_TIME)
async def lottery_draw_task():
     # ... (code nh∆∞ c≈©)
     pass


# --- CH·∫†Y BOT ---
if TOKEN:
    keep_alive(); bot.run(TOKEN)
else:
    print("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN")
