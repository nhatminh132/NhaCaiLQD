# bot.py
# -*- coding: utf-8 -*-
"""
Bot Discord: casino mini (slash commands)
Bao g·ªìm: /balance, /daily, /code, /top, /chuyenxu, /profile, admin group,
v√† games: /slots, /hilo, /tungxu, /xucxac, /baucua, /duangua, /quay (roulette), /baccarat
T∆∞∆°ng th√≠ch v·ªõi Supabase (n·∫øu c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng).
"""
import os
import random
import typing
import asyncio
import re
from datetime import datetime, timedelta, date, timezone, time as dtime

import discord
from discord.ext import commands, tasks
from discord import app_commands

from dotenv import load_dotenv

# Optional: supabase (if not available th√¨ b·∫°n ph·∫£i thay h√†m DB)
try:
    from supabase import create_client, Client
    HAS_SUPABASE = True
except Exception:
    HAS_SUPABASE = False

import pytz

# ---- C·∫§U H√åNH ----
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not TOKEN:
    print("L·ªñI: C·∫ßn bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN")
    exit(1)

# Supabase client (n·∫øu c√≥)
supabase = None
if HAS_SUPABASE and SUPABASE_URL and SUPABASE_KEY:
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
else:
    if HAS_SUPABASE:
        print("Ch√∫ √Ω: SUPABASE_URL ho·∫∑c SUPABASE_KEY kh√¥ng c·∫•u h√¨nh - DB supabase s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
    else:
        print("Ch√∫ √Ω: Th∆∞ vi·ªán supabase ch∆∞a c√†i - DB supabase s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

# ---- H·∫∞NG S·ªê & C√ÄI ƒê·∫∂T ----
STARTING_TOKENS = 100
DAILY_REWARD = 50
DAILY_COOLDOWN_HOURS = 24
ADMIN_ROLE = "Bot Admin"
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

# Roulette
RED_NUMBERS = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
BLACK_NUMBERS = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]
ROULETTE_PAYOUTS = {'single':35, 'split':17, 'street':11, 'corner':8, 'sixline':5, 'dozen':2, 'column':2, 'color':1, 'evenodd':1, 'half':1}

# Slots
SLOT_SYMBOLS = [('üçí', 10, 10), ('üçã', 9, 15), ('üçä', 8, 20), ('üçì', 5, 30), ('üîî', 3, 50), ('üíé', 2, 100), ('7Ô∏è‚É£', 1, 200)]
SLOT_WHEEL = [s for s,w,p in SLOT_SYMBOLS]
SLOT_WEIGHTS = [w for s,w,p in SLOT_SYMBOLS]
SLOT_PAYOUTS = {s:p for s,w,p in SLOT_SYMBOLS}

# Cards
CARD_SUITS = ['‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è']
CARD_RANKS_BACCARAT = {'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'10':0,'J':0,'Q':0,'K':0,'A':1}
CARD_RANKS_HILO = {'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'10':10,'J':11,'Q':12,'K':13,'A':14}

# Race
NUM_HORSES = 6
RACE_LENGTH = 20

# Globals
intents = discord.Intents.default()
intents.members = True
bot = discord.Bot(intents=intents)

# In-memory placeholders for game locks
bot.users_in_animation = set()

# -------------------------
# ---- DATABASE HELPERS ---
# -------------------------
def _ensure_profile_defaults(data: dict) -> dict:
    if data is None:
        return None
    data.setdefault('balance', STARTING_TOKENS)
    data.setdefault('last_daily', None)
    data.setdefault('used_codes', [])
    data.setdefault('total_bet', 0)
    data.setdefault('total_won', 0)
    data.setdefault('games_played', 0)
    data.setdefault('daily_streak', 0)
    data.setdefault('last_streak_date', None)
    return data

def get_user_data(user_id: int) -> typing.Optional[dict]:
    """L·∫•y user t·ª´ supabase; n·∫øu kh√¥ng t·ªìn t·∫°i t·∫°o m·ªõi.
    N·∫øu supabase kh√¥ng c·∫•u h√¨nh - d√πng gi·∫£ l·∫≠p tr·∫£ default dict (kh√¥ng l∆∞u l√¢u d√†i)."""
    if supabase is None:
        # WARNING: volatile in-memory fallback (not persistent)
        return {'user_id': user_id, 'balance': STARTING_TOKENS, 'last_daily': None, 'used_codes': [], 'total_bet':0, 'total_won':0, 'games_played':0, 'daily_streak':0, 'last_streak_date': None}
    try:
        resp = supabase.table('profiles').select('*').eq('user_id', user_id).maybe_single().execute()
        data = resp.data
        if not data:
            # create new
            insert = supabase.table('profiles').insert({'user_id': user_id, 'balance': STARTING_TOKENS, 'last_daily': None, 'used_codes': [], 'total_bet':0, 'total_won':0, 'games_played':0, 'daily_streak':0, 'last_streak_date': None}).execute()
            return _ensure_profile_defaults(insert.data[0])
        return _ensure_profile_defaults(data)
    except Exception as e:
        print("DB get_user_data error:", e)
        return None

def update_balance(user_id: int, amount: int) -> typing.Optional[int]:
    """Th√™m/tr·ª´ balance (amount c√≥ th·ªÉ √¢m). Tr·∫£ v·ªÅ s·ªë d∆∞ m·ªõi ho·∫∑c None n·∫øu l·ªói."""
    if supabase is None:
        # Volatile fallback: cannot persist; just return simulated new balance
        # NOTE: This fallback is not safe: in real usage, configure Supabase.
        return None
    try:
        # N·∫øu b·∫°n ƒë√£ c√≥ RPC function adjust_balance, t·ªët. N·∫øu kh√¥ng, th·ª±c hi·ªán ƒë·ªçc-ghi an to√†n.
        # Th·ª≠ g·ªçi RPC ƒë·∫ßu ti√™n
        try:
            resp = supabase.rpc('adjust_balance', {'user_id_input': user_id, 'amount_input': amount}).execute()
            return resp.data
        except Exception:
            # Fallback: read current, update
            resp = supabase.table('profiles').select('balance').eq('user_id', user_id).maybe_single().execute()
            cur = resp.data.get('balance', STARTING_TOKENS) if resp.data else STARTING_TOKENS
            new = max(0, cur + amount)
            supabase.table('profiles').update({'balance': new}).eq('user_id', user_id).execute()
            return new
    except Exception as e:
        print("DB update_balance error:", e)
        return None

def update_profile_stats(user_id: int, bet_amount: int, net_gain: int):
    """C·∫≠p nh·∫≠t ch·ªâ s·ªë t·ªïng (kh√¥ng b·∫Øt bu·ªôc ch√≠nh x√°c)."""
    if supabase is None: return
    try:
        # L·∫•y, c·∫≠p nh·∫≠t c·ª•c b·ªô r·ªìi ghi
        resp = supabase.table('profiles').select('*').eq('user_id', user_id).maybe_single().execute()
        data = resp.data or {}
        total_bet = data.get('total_bet', 0) + bet_amount
        total_won = data.get('total_won', 0) + max(0, net_gain)
        games_played = data.get('games_played', 0) + 1
        supabase.table('profiles').update({'total_bet': total_bet, 'total_won': total_won, 'games_played': games_played}).eq('user_id', user_id).execute()
    except Exception as e:
        print("DB update_profile_stats error:", e)

# -------------------------
# ---- UTIL & HELPERS -----
# -------------------------
global_cooldown = commands.CooldownMapping.from_cooldown(30, 60.0, commands.BucketType.default)
def global_rate_limit():
    async def predicate(interaction: discord.Interaction):
        bucket = global_cooldown.get_bucket(interaction)
        retry_after = bucket.update_rate_limit()
        if retry_after:
            raise app_commands.CommandOnCooldown(bucket, retry_after)
        return True
    return app_commands.check(predicate)

def is_user_not_in_game():
    async def predicate(interaction: discord.Interaction):
        uid = interaction.user.id
        if uid in bot.users_in_animation:
            raise app_commands.CheckFailure("B·∫°n ƒëang trong m·ªôt game kh√°c.")
        return True
    return app_commands.check(predicate)

def fmt_num(n: int) -> str:
    return f"{n:,}"

# -------------------------
# ---- EVENTS & ERRORS ----
# -------------------------
@bot.event
async def on_ready():
    print(f"Bot ready: {bot.user} (id: {bot.user.id})")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} commands.")
    except Exception as e:
        print("Sync error:", e)

@bot.event
async def on_application_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    orig = getattr(error, 'original', error)
    if isinstance(error, app_commands.CommandOnCooldown):
        await interaction.response.send_message(f"‚è≥ Vui l√≤ng ƒë·ª£i {error.retry_after:.1f}s.", ephemeral=True)
    elif isinstance(error, app_commands.MissingRole):
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True)
    elif isinstance(error, app_commands.CheckFailure):
        await interaction.response.send_message(str(orig), ephemeral=True)
    else:
        print("Unhandled command error:", orig)
        try:
            await interaction.response.send_message("ƒê√£ x·∫£y ra l·ªói trong l·ªánh.", ephemeral=True)
        except:
            pass

# -------------------------
# ---- SLASH COMMANDS -----
# -------------------------
@bot.slash_command(name="kiemtra", description="Ki·ªÉm tra s·ªë d∆∞ token c·ªßa b·∫°n.")
@global_rate_limit()
async def balance_check_slash(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    user_data = get_user_data(interaction.user.id)
    if not user_data:
        await interaction.followup.send("L·ªói khi l·∫•y d·ªØ li·ªáu.")
        return
    await interaction.followup.send(f'ü™ô {interaction.user.mention}, b·∫°n c√≥ **{fmt_num(user_data.get("balance",0))}** token.')

@bot.slash_command(name="daily", description="Nh·∫≠n th∆∞·ªüng h√†ng ng√†y.")
@global_rate_limit()
@is_user_not_in_game()
async def daily_reward_slash(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    uid = interaction.user.id
    user_data = get_user_data(uid)
    if not user_data:
        await interaction.followup.send("L·ªói DB.")
        return

    now = datetime.now(timezone.utc)
    last_daily_iso = user_data.get('last_daily')
    can_claim = True
    if last_daily_iso:
        try:
            last_dt = datetime.fromisoformat(last_daily_iso)
            if now < last_dt + timedelta(hours=DAILY_COOLDOWN_HOURS):
                remaining = (last_dt + timedelta(hours=DAILY_COOLDOWN_HOURS)) - now
                hrs = int(remaining.total_seconds()//3600)
                mins = int((remaining.total_seconds()%3600)//60)
                await interaction.followup.send(f"B·∫°n c·∫ßn ch·ªù {hrs} gi·ªù {mins} ph√∫t n·ªØa.", ephemeral=True)
                return
        except Exception:
            pass

    # Streak logic
    today_vi = datetime.now(VIETNAM_TZ).date()
    last_streak_date = user_data.get('last_streak_date')
    if last_streak_date:
        try:
            last_date = date.fromisoformat(last_streak_date)
            if last_date == today_vi:
                new_streak = user_data.get('daily_streak',0)
            elif last_date == (today_vi - timedelta(days=1)):
                new_streak = user_data.get('daily_streak',0) + 1
            else:
                new_streak = 1
        except Exception:
            new_streak = 1
    else:
        new_streak = 1
    streak_bonus = min(new_streak * 10, 100)
    total_reward = DAILY_REWARD + streak_bonus

    new_bal = update_balance(uid, total_reward)
    if new_bal is None:
        await interaction.followup.send("L·ªói c·∫≠p nh·∫≠t s·ªë d∆∞.", ephemeral=True)
        return
    # c·∫≠p nh·∫≠t last_daily, streak
    if supabase:
        try:
            supabase.table('profiles').update({'last_daily': now.isoformat(), 'daily_streak': new_streak, 'last_streak_date': str(today_vi)}).eq('user_id', uid).execute()
        except:
            pass

    await interaction.followup.send(f"üéâ {interaction.user.mention}, b·∫°n nh·∫≠n **{fmt_num(total_reward)}** token! (Streak: {new_streak} ng√†y). S·ªë d∆∞ m·ªõi: **{fmt_num(new_bal)}**.")

@bot.slash_command(name="code", description="ƒê·ªïi giftcode.")
@app_commands.describe(code_to_redeem="M√£ b·∫°n mu·ªën nh·∫≠p")
@global_rate_limit()
@is_user_not_in_game()
async def redeem_code_slash(interaction: discord.Interaction, code_to_redeem: str):
    await interaction.response.defer(ephemeral=True)
    uid = interaction.user.id
    user_data = get_user_data(uid)
    if not user_data:
        await interaction.followup.send("L·ªói DB.")
        return
    code = code_to_redeem.strip().upper()
    if supabase is None:
        await interaction.followup.send("Ch·ª©c nƒÉng giftcode c·∫ßn Supabase.", ephemeral=True)
        return
    try:
        resp = supabase.table('gift_codes').select('*').eq('code', code).maybe_single().execute()
        if not resp.data:
            await interaction.followup.send("M√£ kh√¥ng t·ªìn t·∫°i ho·∫∑c h·∫øt h·∫°n.", ephemeral=True); return
        if code in user_data.get('used_codes', []):
            await interaction.followup.send("B·∫°n ƒë√£ d√πng m√£ n√†y r·ªìi.", ephemeral=True); return
        reward = resp.data['reward']
        newbal = update_balance(uid, reward)
        if newbal is None:
            await interaction.followup.send("L·ªói c·∫≠p nh·∫≠t s·ªë d∆∞.", ephemeral=True); return
        # Update used_codes
        used = user_data.get('used_codes', []) + [code]
        supabase.table('profiles').update({'used_codes': used}).eq('user_id', uid).execute()
        await interaction.followup.send(f"üéÅ Nh·∫≠n th√†nh c√¥ng **{fmt_num(reward)}** token! S·ªë d∆∞ m·ªõi: **{fmt_num(newbal)}**.")
    except Exception as e:
        print("Redeem code error:", e)
        await interaction.followup.send("L·ªói khi nh·∫≠p code.", ephemeral=True)

@bot.slash_command(name="top", description="Xem b·∫£ng x·∫øp h·∫°ng (top N).")
@app_commands.describe(top_n="S·ªë l∆∞·ª£ng mu·ªën xem")
@global_rate_limit()
async def leaderboard_slash(interaction: discord.Interaction, top_n: int = 10):
    await interaction.response.defer()
    if supabase is None:
        await interaction.followup.send("Ch·ª©c nƒÉng c·∫ßn Supabase.", ephemeral=True); return
    top_n = max(1, min(top_n, 25))
    try:
        resp = supabase.table('profiles').select('user_id', 'balance').order('balance', desc=True).limit(top_n).execute()
        if not resp.data:
            await interaction.followup.send("Ch∆∞a c√≥ d·ªØ li·ªáu.", ephemeral=True); return
        embed = discord.Embed(title=f"üèÜ Top {top_n} ƒê·∫°i Gia", color=discord.Color.gold())
        rank = 1
        for row in resp.data:
            embed.add_field(name=f"#{rank} - <@{row['user_id']}>", value=f"**{fmt_num(row.get('balance',0))}** ü™ô", inline=False)
            rank += 1
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Leaderboard error:", e)
        await interaction.followup.send("L·ªói l·∫•y b·∫£ng x·∫øp h·∫°ng.", ephemeral=True)

@bot.slash_command(name="chuyenxu", description="Chuy·ªÉn token cho ng∆∞·ªùi kh√°c.")
@app_commands.describe(recipient="Ng∆∞·ªùi nh·∫≠n", amount="S·ªë token")
@global_rate_limit()
@is_user_not_in_game()
async def transfer_tokens_slash(interaction: discord.Interaction, recipient: discord.Member, amount: int):
    await interaction.response.defer(ephemeral=True)
    sender = interaction.user
    if recipient.id == sender.id:
        await interaction.followup.send("B·∫°n kh√¥ng th·ªÉ t·ª± chuy·ªÉn cho m√¨nh.", ephemeral=True); return
    if amount <= 0:
        await interaction.followup.send("S·ªë ti·ªÅn ph·∫£i > 0.", ephemeral=True); return
    sender_data = get_user_data(sender.id)
    if not sender_data:
        await interaction.followup.send("L·ªói DB.", ephemeral=True); return
    if sender_data.get('balance',0) < amount:
        await interaction.followup.send(f"B·∫°n kh√¥ng ƒë·ªß ti·ªÅn (c√≤n {fmt_num(sender_data.get('balance',0))}).", ephemeral=True); return
    sb = update_balance(sender.id, -amount)
    if sb is None:
        await interaction.followup.send("L·ªói tr·ª´ ti·ªÅn.", ephemeral=True); return
    rb = update_balance(recipient.id, amount)
    if rb is None:
        # try rollback
        update_balance(sender.id, amount)
        await interaction.followup.send("L·ªói c·ªông ti·ªÅn ng∆∞·ªùi nh·∫≠n. Giao d·ªãch h·ªßy.", ephemeral=True); return
    await interaction.followup.send(f"‚úÖ ƒê√£ chuy·ªÉn **{fmt_num(amount)}** ü™ô cho {recipient.mention}.", ephemeral=True)

@bot.slash_command(name="profile", description="Xem h·ªì s∆° b·∫°n ho·∫∑c th√†nh vi√™n kh√°c.")
@app_commands.describe(member="Th√†nh vi√™n (ƒë·ªÉ tr·ªëng = b·∫°n)")
@global_rate_limit()
async def profile_slash(interaction: discord.Interaction, member: typing.Optional[discord.Member] = None):
    await interaction.response.defer()
    target = member or interaction.user
    data = get_user_data(target.id)
    if not data:
        await interaction.followup.send("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu.", ephemeral=True); return
    bal = data.get('balance',0)
    embed = discord.Embed(title=f"üìä H·ªì s∆° {target.display_name}", color=target.color)
    embed.set_thumbnail(url=target.display_avatar.url)
    embed.add_field(name="üí∞ S·ªë d∆∞", value=f"**{fmt_num(bal)}** ü™ô", inline=True)
    embed.add_field(name="üî• Chu·ªói Daily", value=f"{data.get('daily_streak',0)} ng√†y", inline=True)
    embed.add_field(name="üé≤ Game ƒë√£ ch∆°i", value=f"{fmt_num(data.get('games_played',0))}", inline=False)
    embed.add_field(name="üìà T·ªïng c∆∞·ª£c", value=f"{fmt_num(data.get('total_bet',0))} ü™ô", inline=False)
    embed.add_field(name="üèÜ T·ªïng th·∫Øng", value=f"{fmt_num(data.get('total_won',0))} ü™ô", inline=False)
    await interaction.followup.send(embed=embed)

# -------------------------
# ---- ADMIN COMMANDS -----
# -------------------------
admin_group = app_commands.Group(name="admin", description="L·ªánh admin", guild_only=True)

@admin_group.command(name="give", description="C·ªông/tr·ª´ token cho ng∆∞·ªùi d√πng.")
@app_commands.describe(member="Th√†nh vi√™n", amount="S·ªë token (+/-)")
@global_rate_limit()
async def admin_give_slash(interaction: discord.Interaction, member: discord.Member, amount: int):
    # Check role
    has = any(r.name == ADMIN_ROLE for r in interaction.user.roles)
    if not has:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn Admin.", ephemeral=True); return
    await interaction.response.defer(ephemeral=True)
    nb = update_balance(member.id, amount)
    if nb is None:
        await interaction.followup.send("L·ªói c·∫≠p nh·∫≠t s·ªë d∆∞.", ephemeral=True); return
    await interaction.followup.send(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {member.mention} l√™n **{fmt_num(nb)}** ü™ô.", ephemeral=True)

@admin_group.command(name="set", description="Set s·ªë d∆∞ ch√≠nh x√°c cho user.")
@app_commands.describe(member="Th√†nh vi√™n", amount="S·ªë d∆∞ ƒë·∫∑t")
@global_rate_limit()
async def admin_set_slash(interaction: discord.Interaction, member: discord.Member, amount: int):
    has = any(r.name == ADMIN_ROLE for r in interaction.user.roles)
    if not has:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn Admin.", ephemeral=True); return
    if supabase is None:
        await interaction.response.send_message("C·∫ßn Supabase ƒë·ªÉ set balance.", ephemeral=True); return
    await interaction.response.defer(ephemeral=True)
    try:
        supabase.rpc('set_balance', {'user_id_input': member.id, 'amount_input': amount}).execute()
        await interaction.followup.send(f"‚úÖ ƒê√£ set {member.mention} = **{fmt_num(amount)}** ü™ô", ephemeral=True)
    except Exception as e:
        print("admin set error:", e)
        await interaction.followup.send("L·ªói khi set balance.", ephemeral=True)

bot.tree.add_command(admin_group)

# -------------------------
# ---- GAMES: SLOTS ------
# -------------------------
@bot.slash_command(name="slots", description="Ch∆°i m√°y x√®ng.")
@app_commands.describe(bet_amount="S·ªë token c∆∞·ª£c")
@global_rate_limit()
@is_user_not_in_game()
async def slots_slash(interaction: discord.Interaction, bet_amount: int):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user:
        await interaction.response.send_message("L·ªói DB.", ephemeral=True); return
    if bet_amount <= 0:
        await interaction.response.send_message("C∆∞·ª£c ph·∫£i > 0.", ephemeral=True); return
    if user.get('balance',0) < bet_amount:
        await interaction.response.send_message("B·∫°n kh√¥ng ƒë·ªß token.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        result = random.choices(SLOT_WHEEL, weights=SLOT_WEIGHTS, k=3)
        embed = discord.Embed(title="üé∞ M√°y X√®ng üé∞", description="| - | - | - |", color=discord.Color.blue())
        embed.set_footer(text=f"{interaction.user.display_name} c∆∞·ª£c {fmt_num(bet_amount)} ü™ô")
        msg = await interaction.followup.send(embed=embed, wait=True)

        # Animation
        await asyncio.sleep(1.2)
        embed.description = f"| {result[0]} | - | - |"; await msg.edit(embed=embed)
        await asyncio.sleep(1.2)
        embed.description = f"| {result[0]} | {result[1]} | - |"; await msg.edit(embed=embed)
        await asyncio.sleep(1.2)
        embed.description = f"| {result[0]} | {result[1]} | {result[2]} |"; await msg.edit(embed=embed)

        winnings = 0
        if result[0] == result[1] == result[2]:
            if result[0] == '7Ô∏è‚É£':
                # jackpot: simple fixed
                winnings = bet_amount * SLOT_PAYOUTS[result[0]] * 10
            else:
                winnings = bet_amount * SLOT_PAYOUTS[result[0]]
        elif result[0] == result[1] or result[1] == result[2]:
            winnings = bet_amount  # 1:1 for any pair

        payout = winnings if winnings > 0 else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)

        if winnings > 0:
            embed.color = discord.Color.green()
            embed.description += f"\n\nüéâ B·∫°n th·∫Øng **{fmt_num(winnings)}** ü™ô!\nS·ªë d∆∞ m·ªõi: **{fmt_num(newbal)}** ü™ô"
        else:
            embed.color = discord.Color.red()
            embed.description += f"\n\nüò¢ B·∫°n thua **{fmt_num(bet_amount)}** ü™ô.\nS·ªë d∆∞ m·ªõi: **{fmt_num(newbal)}** ü™ô"
        await msg.edit(embed=embed)

    except Exception as e:
        print("Slots error:", e)
        try:
            await interaction.followup.send("L·ªói khi ch∆°i Slots.", ephemeral=True)
        except:
            pass
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- GAME: HILO (Cao/Th·∫•p) ----
# -------------------------
@bot.slash_command(name="hilo", description="ƒêo√°n l√° b√†i ti·∫øp theo cao hay th·∫•p.")
@app_commands.describe(bet_amount="S·ªë token", choice="Cao/Th·∫•p")
@app_commands.choices(choice=[app_commands.Choice(name="Cao", value="cao"), app_commands.Choice(name="Th·∫•p", value="th·∫•p")])
@global_rate_limit()
@is_user_not_in_game()
async def hilo_slash(interaction: discord.Interaction, bet_amount: int, choice: str):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user:
        await interaction.response.send_message("L·ªói DB.", ephemeral=True); return
    if bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë·ªß.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        rank1 = random.choice(list(CARD_RANKS_HILO.keys())); suit1 = random.choice(CARD_SUITS); val1 = CARD_RANKS_HILO[rank1]
        rank2 = random.choice(list(CARD_RANKS_HILO.keys())); suit2 = random.choice(CARD_SUITS); val2 = CARD_RANKS_HILO[rank2]

        embed = discord.Embed(title="‚¨ÜÔ∏è Cao hay Th·∫•p ‚¨áÔ∏è", color=discord.Color.blue())
        embed.add_field(name="L√° 1", value=f"**{rank1}{suit1}** (Gi√° tr·ªã: {val1})", inline=False)
        embed.add_field(name="B·∫°n c∆∞·ª£c", value=f"**{fmt_num(bet_amount)}** v√†o **{choice.upper()}**", inline=False)
        embed.add_field(name="L√° 2", value=f"**{rank2}{suit2}** (Gi√° tr·ªã: {val2})", inline=False)

        is_win = False
        if val2 > val1 and choice == 'cao': is_win = True
        if val2 < val1 and choice == 'th·∫•p': is_win = True
        # tie => lose
        payout = bet_amount if is_win else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)

        if is_win:
            embed.color = discord.Color.green()
            embed.description = f"üéâ B·∫°n th·∫Øng! S·ªë d∆∞ m·ªõi: **{fmt_num(newbal)}**"
        else:
            embed.color = discord.Color.red()
            embed.description = f"üò¢ B·∫°n thua. S·ªë d∆∞ m·ªõi: **{fmt_num(newbal)}**"
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        print("Hilo error:", e)
        await interaction.response.send_message("L·ªói khi ch∆°i Hilo.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- COINFLIP ----
# -------------------------
@bot.slash_command(name="tungxu", description="Tung xu (s·∫•p/ng·ª≠a).")
@app_commands.describe(bet_amount="S·ªë token", choice="S·∫•p/Ng·ª≠a")
@app_commands.choices(choice=[app_commands.Choice(name="S·∫•p", value="s·∫•p"), app_commands.Choice(name="Ng·ª≠a", value="ng·ª≠a")])
@global_rate_limit()
@is_user_not_in_game()
async def coinflip_slash(interaction: discord.Interaction, bet_amount: int, choice: str):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        res = random.choice(['s·∫•p','ng·ª≠a'])
        is_win = (res == choice)
        payout = bet_amount if is_win else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)
        title = f"ü™ô K·∫øt qu·∫£: {res.upper()}!"
        embed = discord.Embed(title=title, color=(discord.Color.green() if is_win else discord.Color.red()))
        if is_win:
            embed.description = f"üéâ B·∫°n ƒëo√°n ƒë√∫ng! +{fmt_num(bet_amount)} ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        else:
            embed.description = f"üò¢ B·∫°n ƒëo√°n sai. -{fmt_num(bet_amount)} ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Coinflip error:", e)
        await interaction.followup.send("L·ªói tung xu.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- DICE (X√öC X·∫ÆC) ----
# -------------------------
@bot.slash_command(name="xucxac", description="ƒêo√°n x√∫c x·∫Øc (1-6). Th·∫Øng 1 ƒÉn 5.")
@app_commands.describe(bet_amount="S·ªë token", guess="S·ªë (1-6)")
@global_rate_limit()
@is_user_not_in_game()
async def dice_roll_slash(interaction: discord.Interaction, bet_amount: int, guess: app_commands.Range[int,1,6]):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return
    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        res = random.randint(1,6)
        is_win = (res == guess)
        winnings = bet_amount * 5 if is_win else 0
        payout = winnings if is_win else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)
        embed = discord.Embed(title=f"üé≤ Gieo x√∫c x·∫Øc... K·∫øt qu·∫£: {res}", color=(discord.Color.green() if is_win else discord.Color.red()))
        if is_win:
            embed.description = f"üéâ B·∫°n ƒëo√°n ƒë√∫ng! Nh·∫≠n **{fmt_num(winnings)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        else:
            embed.description = f"üò¢ B·∫°n ƒëo√°n sai. M·∫•t **{fmt_num(bet_amount)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Dice error:", e)
        await interaction.followup.send("L·ªói khi gieo x√∫c x·∫Øc.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- B·∫¶U CUA ----
# -------------------------
BAU_CUA_MAP = {'b·∫ßu':'B·∫ßu üçê','bau':'B·∫ßu üçê','üçê':'B·∫ßu üçê','cua':'Cua ü¶Ä','ü¶Ä':'Cua ü¶Ä','t√¥m':'T√¥m ü¶ê','tom':'T√¥m ü¶ê','ü¶ê':'T√¥m ü¶ê','c√°':'C√° üêü','ca':'C√° üêü','üêü':'C√° üêü','g√†':'G√† üêì','ga':'G√† üêì','üêì':'G√† üêì','nai':'Nai ü¶å','ü¶å':'Nai ü¶å'}
BAU_CUA_LIST = ['B·∫ßu üçê','Cua ü¶Ä','T√¥m ü¶ê','C√° üêü','G√† üêì','Nai ü¶å']

@bot.slash_command(name="baucua", description="Ch∆°i B·∫ßu Cua.")
@app_commands.describe(bet_amount="S·ªë token", choice="L·ª±a ch·ªçn")
@global_rate_limit()
@is_user_not_in_game()
async def bau_cua_slash(interaction: discord.Interaction, bet_amount: int, choice: str):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return
    normalized = BAU_CUA_MAP.get(choice.lower().strip())
    if not normalized:
        await interaction.response.send_message("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        results = random.choices(BAU_CUA_LIST, k=3)
        hits = results.count(normalized)
        winnings = bet_amount * hits if hits>0 else 0
        payout = winnings if wins:= (hits>0) else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)
        embed = discord.Embed(title="ü¶Ä B·∫ßu Cua", description=f"| {results[0]} | {results[1]} | {results[2]} |", color=(discord.Color.green() if wins else discord.Color.red()))
        if wins:
            embed.add_field(name="üéâ K·∫øt qu·∫£", value=f"Tr√∫ng {hits} l·∫ßn ‚Äî B·∫°n nh·∫≠n **{fmt_num(winnings)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**")
        else:
            embed.add_field(name="üò¢ K·∫øt qu·∫£", value=f"B·∫°n m·∫•t **{fmt_num(bet_amount)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**")
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Bau cua error:", e)
        await interaction.followup.send("L·ªói B·∫ßu Cua.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- ƒêUA NG·ª∞A ----
# -------------------------
def get_race_track(positions):
    s = ""
    for i in range(NUM_HORSES):
        pos = min(positions[i], RACE_LENGTH)
        finish = 'üèÜ' if positions[i] >= RACE_LENGTH else 'üèÅ'
        s += f"üêé {i+1}: {'‚îÄ'*pos}{finish}\n"
    return s

@bot.slash_command(name="duangua", description="ƒêua ng·ª±a (1-6). Th·∫Øng 1 ƒÉn 4.")
@app_commands.describe(bet_amount="S·ªë token", horse_number="Ng·ª±a (1-6)")
@global_rate_limit()
@is_user_not_in_game()
async def dua_ngua_slash(interaction: discord.Interaction, bet_amount: int, horse_number: app_commands.Range[int,1,NUM_HORSES]):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        positions = [0]*NUM_HORSES
        embed = discord.Embed(title="üêé ƒêua ng·ª±a b·∫Øt ƒë·∫ßu!", description=get_race_track(positions), color=discord.Color.blue())
        embed.set_footer(text=f"{interaction.user.display_name} c∆∞·ª£c {fmt_num(bet_amount)} v√†o ng·ª±a {horse_number}")
        msg = await interaction.followup.send(embed=embed, wait=True)

        winner = None
        while winner is None:
            await asyncio.sleep(1.5)
            for i in range(NUM_HORSES):
                if positions[i] < RACE_LENGTH:
                    positions[i] += random.randint(1,3)
                    if positions[i] >= RACE_LENGTH and winner is None:
                        winner = i+1
            embed.description = get_race_track(positions)
            try:
                await msg.edit(embed=embed)
            except discord.NotFound:
                raise asyncio.CancelledError("Message deleted")

        is_win = (winner == horse_number)
        winnings = bet_amount*4 if is_win else 0
        payout = winnings if is_win else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)
        embed.title = f"üèÅ Ng·ª±a chi·∫øn th·∫Øng: {winner}"
        if is_win:
            embed.color = discord.Color.green()
            embed.description += f"\n\nüéâ B·∫°n th·∫Øng! Nh·∫≠n **{fmt_num(winnings)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        else:
            embed.color = discord.Color.red()
            embed.description += f"\n\nüò¢ B·∫°n thua. M·∫•t **{fmt_num(bet_amount)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        await msg.edit(embed=embed)
    except asyncio.CancelledError:
        await interaction.followup.send("Tr√≤ ch∆°i b·ªã h·ªßy.", ephemeral=True)
    except Exception as e:
        print("Race error:", e)
        await interaction.followup.send("L·ªói ƒëua ng·ª±a.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- ROULETTE (PARSE + PLAY) ----
# -------------------------
def parse_roulette_bet(bet_type_str: str):
    s = bet_type_str.lower().strip()
    if s.isdigit():
        n = int(s)
        if 0 <= n <= 36:
            return {'category':'single','numbers':[n]}
    if s in ['ƒë·ªè','red']:
        return {'category':'color','numbers':RED_NUMBERS}
    if s in ['ƒëen','black']:
        return {'category':'color','numbers':BLACK_NUMBERS}
    if s in ['l·∫ª','odd']:
        return {'category':'evenodd','numbers':[n for n in range(1,37) if n%2!=0]}
    if s in ['ch·∫µn','even']:
        return {'category':'evenodd','numbers':[n for n in range(1,37) if n%2==0]}
    if s in ['n·ª≠a1','1-18','1-18']:
        return {'category':'half','numbers':list(range(1,19))}
    if s in ['n·ª≠a2','19-36','19-36']:
        return {'category':'half','numbers':list(range(19,37))}
    if s in ['t√°1','1-12']:
        return {'category':'dozen','numbers':list(range(1,13))}
    if s in ['t√°2','13-24']:
        return {'category':'dozen','numbers':list(range(13,25))}
    if s in ['t√°3','25-36']:
        return {'category':'dozen','numbers':list(range(25,37))}
    if s in ['c·ªôt1','col1']:
        return {'category':'column','numbers':[n for n in range(1,37) if n%3==1]}
    if s in ['c·ªôt2','col2']:
        return {'category':'column','numbers':[n for n in range(1,37) if n%3==2]}
    if s in ['c·ªôt3','col3']:
        return {'category':'column','numbers':[n for n in range(1,37) if n%3==0]}
    # complex regex for split/street/corner/sixline
    split = re.match(r"split-(\d{1,2})-(\d{1,2})", s)
    if split:
        a,b = int(split.group(1)), int(split.group(2))
        if 1<=a<=36 and 1<=b<=36 and a!=b:
            return {'category':'split','numbers':[a,b]}
    street = re.match(r"street-(\d{1,2})-(\d{1,2})-(\d{1,2})", s)
    if street:
        nums = list(map(int, street.groups()))
        if all(1<=n<=36 for n in nums):
            return {'category':'street','numbers':nums}
    corner = re.match(r"corner-(\d{1,2})-(\d{1,2})-(\d{1,2})-(\d{1,2})", s)
    if corner:
        nums = list(map(int, corner.groups()))
        if len(set(nums))==4 and all(1<=n<=36 for n in nums):
            return {'category':'corner','numbers':nums}
    six = re.match(r"sixline-(\d{1,2})-(\d{1,2})", s)
    if six:
        a,b = int(six.group(1)), int(six.group(2))
        if 1<=a<=31 and b==a+5:
            return {'category':'sixline','numbers':list(range(a,b+1))}
    raise ValueError(f"Invalid Roulette bet type: {bet_type_str}")

@bot.slash_command(name="quay", description="Ch∆°i Roulette.")
@app_commands.describe(bet_amount="S·ªë token", bet_type="Lo·∫°i c∆∞·ª£c (s·ªë, ƒë·ªè, ƒëen, t√°1, col1, split-x-y, etc.)")
@global_rate_limit()
@is_user_not_in_game()
async def roulette_slash(interaction: discord.Interaction, bet_amount: int, bet_type: str):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <=0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return
    try:
        parsed = parse_roulette_bet(bet_type)
    except ValueError as e:
        await interaction.response.send_message(str(e), ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        spin = random.randint(0,36)
        color = 'xanh l√°' if spin==0 else ('ƒë·ªè' if spin in RED_NUMBERS else 'ƒëen')
        is_win = spin in parsed['numbers']
        payout_rate = ROULETTE_PAYOUTS.get(parsed['category'], 0) if is_win else 0
        winnings = bet_amount * payout_rate if is_win else 0
        payout = winnings if is_win else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)

        embed = discord.Embed(title="üé° Roulette", color=(discord.Color.green() if is_win else discord.Color.red()))
        embed.add_field(name="K·∫øt qu·∫£", value=f"S·ªë: **{spin}** ({color})", inline=False)
        embed.add_field(name="C∆∞·ª£c c·ªßa b·∫°n", value=f"**{bet_type}** ‚Äî {fmt_num(bet_amount)} ü™ô", inline=False)
        if is_win:
            embed.description = f"üéâ B·∫°n th·∫Øng! 1 ƒÉn {payout_rate}. Nh·∫≠n **{fmt_num(winnings)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        else:
            embed.description = f"üò¢ B·∫°n thua. M·∫•t **{fmt_num(bet_amount)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Roulette error:", e)
        await interaction.followup.send("L·ªói Roulette.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- BACCARAT (Ho√†n thi·ªán) ----
# -------------------------
def create_baccarat_deck():
    deck = []
    for s in CARD_SUITS:
        for rank, val in CARD_RANKS_BACCARAT.items():
            deck.append({'rank':rank,'suit':s,'value':val})
    random.shuffle(deck)
    return deck

def calculate_baccarat_score(hand):
    return sum(card['value'] for card in hand) % 10

def banker_should_draw(banker_score, player_drew_third, player_third_value):
    if not player_drew_third:
        return banker_score <= 5
    if banker_score <= 2:
        return True
    if banker_score == 3:
        return player_third_value != 8
    if banker_score == 4:
        return player_third_value in [2,3,4,5,6,7]
    if banker_score == 5:
        return player_third_value in [4,5,6,7]
    if banker_score == 6:
        return player_third_value in [6,7]
    return False

@bot.slash_command(name="baccarat", description="Ch∆°i Baccarat. C∆∞·ª£c Player/Banker/Tie.")
@app_commands.describe(bet_amount="S·ªë token", choice="Player/Banker/Tie")
@app_commands.choices(choice=[app_commands.Choice(name="Player",value="player"), app_commands.Choice(name="Banker",value="banker"), app_commands.Choice(name="Tie",value="tie")])
@global_rate_limit()
@is_user_not_in_game()
async def baccarat_slash(interaction: discord.Interaction, bet_amount: int, choice: str):
    uid = interaction.user.id
    user = get_user_data(uid)
    if not user or bet_amount <= 0 or user.get('balance',0) < bet_amount:
        await interaction.response.send_message("Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c tham s·ªë sai.", ephemeral=True); return

    bot.users_in_animation.add(uid)
    await interaction.response.defer()
    try:
        deck = create_baccarat_deck()
        player = [deck.pop(), deck.pop()]
        banker = [deck.pop(), deck.pop()]
        pscore = calculate_baccarat_score(player)
        bscore = calculate_baccarat_score(banker)
        player_drew = False
        player_third_val = None

        # Natural
        if pscore >=8 or bscore >=8:
            pass
        else:
            if pscore <=5:
                third = deck.pop()
                player.append(third)
                player_drew = True
                player_third_val = third['value']
                pscore = calculate_baccarat_score(player)
            if banker_should_draw(bscore, player_drew, player_third_val if player_third_val is not None else -1):
                banker.append(deck.pop())
                bscore = calculate_baccarat_score(banker)

        if pscore > bscore:
            winner = 'player'
        elif bscore > pscore:
            winner = 'banker'
        else:
            winner = 'tie'

        multiplier = 0.0
        if choice == 'player':
            multiplier = 1.0 if winner=='player' else -1.0
        elif choice == 'banker':
            multiplier = 0.95 if winner=='banker' else -1.0
        elif choice == 'tie':
            multiplier = 8.0 if winner=='tie' else -1.0
        else:
            multiplier = -1.0

        payout = int(bet_amount * multiplier) if multiplier >=0 else -bet_amount
        newbal = update_balance(uid, payout)
        update_profile_stats(uid, bet_amount, payout)

        p_cards = ", ".join([f"{c['rank']}{c['suit']}" for c in player])
        b_cards = ", ".join([f"{c['rank']}{c['suit']}" for c in banker])
        embed = discord.Embed(title="üÉè Baccarat - K·∫øt qu·∫£", color=(discord.Color.green() if payout>0 else discord.Color.red()))
        embed.add_field(name="Player", value=f"{p_cards} (ƒêi·ªÉm: {pscore})", inline=False)
        embed.add_field(name="Banker", value=f"{b_cards} (ƒêi·ªÉm: {bscore})", inline=False)
        if payout>0:
            embed.description = f"üéâ B·∫°n th·∫Øng **{fmt_num(payout)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        else:
            embed.description = f"üò¢ B·∫°n thua **{fmt_num(bet_amount)}** ü™ô\nS·ªë d∆∞: **{fmt_num(newbal)}**"
        await interaction.followup.send(embed=embed)
    except Exception as e:
        print("Baccarat error:", e)
        await interaction.followup.send("L·ªói Baccarat.", ephemeral=True)
    finally:
        bot.users_in_animation.discard(uid)

# -------------------------
# ---- RUN BOT ----------
# -------------------------
if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        print("Cannot start bot:", e)
