import os
import asyncio
import discord
from discord import app_commands
from discord.ext import commands
from dotenv import load_dotenv
from core.supabase_client import init_supabase, query, insert, update, delete
from core.utils import log_info, log_warn, log_error
from flask import Flask
import threading

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = os.getenv("GUILD_ID")

intents = discord.Intents.default()
intents.messages = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree

# ==========================================================
# üîß Kh·ªüi t·∫°o Supabase v√† c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
# ==========================================================
try:
    init_supabase()
    log_info("Supabase ƒë√£ s·∫µn s√†ng ‚úÖ")
except Exception as e:
    log_error(f"L·ªói khi kh·ªüi t·∫°o Supabase: {e}")
    raise

# ==========================================================
# ‚öôÔ∏è S·ª± ki·ªán kh·ªüi ƒë·ªông bot
# ==========================================================
@bot.event
async def on_ready():
    log_info(f"Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng d∆∞·ªõi t√™n: {bot.user}")
    try:
        synced = await tree.sync(guild=discord.Object(id=GUILD_ID))
        log_info(f"ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash cho server ID {GUILD_ID}")
    except Exception as e:
        log_error(f"L·ªói khi sync l·ªánh: {e}")

# ==========================================================
# üë§ L·ªánh h·ªì s∆° ng∆∞·ªùi ch∆°i
# ==========================================================
@tree.command(name="profile", description="Xem h·ªì s∆° ng∆∞·ªùi ch∆°i", guild=discord.Object(id=GUILD_ID))
async def profile(interaction: discord.Interaction, user: discord.User = None):
    user = user or interaction.user
    await interaction.response.defer(thinking=True)

    try:
        rows = query("users", filters=f"&email=eq.{user.id}", limit=1)
        if not rows:
            await interaction.followup.send(f"‚ùå Ng∆∞·ªùi ch∆°i `{user.display_name}` ch∆∞a c√≥ trong h·ªá th·ªëng.")
            return

        u = rows[0]
        embed = discord.Embed(
            title=f"H·ªì s∆° c·ªßa {user.display_name}",
            color=discord.Color.gold(),
            description=f"üìß Email: {u.get('email', 'Kh√¥ng c√≥')}\nüí∞ S·ªë d∆∞: {u.get('balance', 0):,} Mcoin"
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        await interaction.followup.send(embed=embed)

    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è L·ªói khi t·∫£i d·ªØ li·ªáu: `{e}`")

# ==========================================================
# üíµ L·ªánh chuy·ªÉn ti·ªÅn gi·ªØa ng∆∞·ªùi ch∆°i
# ==========================================================
@tree.command(name="chuyentien", description="Chuy·ªÉn Mcoin cho ng∆∞·ªùi ch∆°i kh√°c", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(nguoi_nhan="Ng∆∞·ªùi nh·∫≠n ti·ªÅn", so_tien="S·ªë Mcoin c·∫ßn chuy·ªÉn")
async def chuyentien(interaction: discord.Interaction, nguoi_nhan: discord.User, so_tien: int):
    nguoi_gui = interaction.user
    await interaction.response.defer(thinking=True)

    if so_tien <= 0:
        await interaction.followup.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
        return

    try:
        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi g·ª≠i
        gui = query("users", filters=f"&email=eq.{nguoi_gui.id}", limit=1)
        nhan = query("users", filters=f"&email=eq.{nguoi_nhan.id}", limit=1)

        if not gui:
            await interaction.followup.send("‚ùå B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n.")
            return
        if not nhan:
            await interaction.followup.send("‚ùå Ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥ t√†i kho·∫£n.")
            return

        balance_gui = gui[0].get("balance", 0)
        if balance_gui < so_tien:
            await interaction.followup.send("‚ùå B·∫°n kh√¥ng ƒë·ªß Mcoin ƒë·ªÉ chuy·ªÉn.")
            return

        # C·∫≠p nh·∫≠t s·ªë d∆∞
        update("users", f"email=eq.{nguoi_gui.id}", {"balance": balance_gui - so_tien})
        update("users", f"email=eq.{nguoi_nhan.id}", {"balance": nhan[0].get('balance', 0) + so_tien})

        await interaction.followup.send(
            f"‚úÖ **{nguoi_gui.display_name}** ƒë√£ chuy·ªÉn **{so_tien:,} Mcoin** cho **{nguoi_nhan.display_name}**!"
        )

    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è L·ªói khi th·ª±c hi·ªán chuy·ªÉn ti·ªÅn: `{e}`")

# ==========================================================
# üéÆ Nh√≥m l·ªánh game (g·ªçi module ƒë·ªông)
# ==========================================================
@tree.command(name="game", description="Ch∆°i game t·∫°i casino üé≤", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(tro_choi="T√™n game mu·ªën ch∆°i (vd: taixiu, bau_cua, slots, horse_race)")
async def game(interaction: discord.Interaction, tro_choi: str):
    await interaction.response.defer(thinking=True)

    try:
        module_name = f"games.{tro_choi}"
        if not os.path.exists(f"./games/{tro_choi}.py"):
            await interaction.followup.send(f"‚ùå Game `{tro_choi}` kh√¥ng t·ªìn t·∫°i.")
            return

        import importlib
        game_module = importlib.import_module(module_name)
        if hasattr(game_module, "start_game"):
            await game_module.start_game(interaction)
        else:
            await interaction.followup.send(f"‚ö†Ô∏è Game `{tro_choi}` ch∆∞a c√≥ h√†m `start_game()`.")
    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è L·ªói khi t·∫£i game: `{e}`")

# ==========================================================
# üè¶ L·ªánh ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
# ==========================================================
@tree.command(name="register", description="ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi trong casino", guild=discord.Object(id=GUILD_ID))
async def register(interaction: discord.Interaction):
    user = interaction.user
    await interaction.response.defer(thinking=True)

    try:
        exists = query("users", filters=f"&email=eq.{user.id}", limit=1)
        if exists:
            await interaction.followup.send("‚ö†Ô∏è B·∫°n ƒë√£ c√≥ t√†i kho·∫£n r·ªìi.")
            return

        insert("users", {"email": str(user.id), "balance": 100000})
        await interaction.followup.send(f"üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c **100,000 Mcoin** mi·ªÖn ph√≠.")
    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è L·ªói khi ƒëƒÉng k√Ω: `{e}`")

# ==========================================================
# üöÄ Kh·ªüi ch·∫°y bot
# ==========================================================
if __name__ == "__main__":
    log_info("ƒêang kh·ªüi ch·∫°y bot Discord...")
    bot.run(TOKEN)

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive and running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

threading.Thread(target=run_flask).start()
